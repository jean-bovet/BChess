//
//  ChessState.hpp
//  BChess
//
//  Created by Jean Bovet on 3/3/18.
//  Copyright Â© 2018 Jean Bovet. All rights reserved.
//

#pragma once

#include "ChessBoard.hpp"
#include <map>

/**
 
(0, 2) = b1 (black bishop number 1)
(1, 4) = N2 (white knight number 2)
(1, 4) = to (last move to square)
(1, 6) = from (last move from square)

b102N214FM14TO16

--

R100N110B120Q130K140B250N260R270P101P211P321P431P541P651P761P871p106p216p326p436p546p656p766p876r107n117b127q137k147b257n267r277
R100N110B120Q130K140B250N260R270P101P211P321P431P651P761P871P543p106p216p326p436p546p656p766p876r107n117b127q137k147b257n267r277
R100N110B120Q130K140B250N260R270P101P211P321P431P651P761P871P543p544p106p216p326p436p656p766p876r107n117b127q137k147b257n267r277
R100N110B120Q130K140B250R270P101P211P321P431P651P761P871N252P543p544p106p216p326p436p656p766p876r107n117b127q137k147b257n267r277
R100N110B120Q130K140B250R270P101P211P321P431P651P761P871N252P543p544n255p106p216p326p436p656p766p876r107n117b127q137k147b257r277
R100N110B120Q130K140R270P101P211P321P431B241P651P761P871N252P543p544n255p106p216p326p436p656p766p876r107n117b127q137k147b257r277
R100N110B120Q130K140R270P101P211P321P431B241P651P761P871N252P543p544n255p106p216p326p436b246p656p766p876r107n117b127q137k147r277
R100N110B120Q130R250K160P101P211P321P431B241P651P761P871N252P543p544n255p106p216p326p436b246p656p766p876r107n117b127q137k147r277
R100N110B120Q130R250K160P101P211P321P431B241P651P761P871N252n243p544p106p216p326p436b246p656p766p876r107n117b127q137k147r277
 */
class ChessState {
private:
    struct PieceInstance {
        char p;        
        int count;
        bool empty;
    };
    
    std::map<char, int> pieceCount;
    std::map<Square, PieceInstance> squareContent;

public:
    void set(ChessBoard board);
    void update(ChessBoard board);
    std::string getState();
};
